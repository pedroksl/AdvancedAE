import com.hypherionmc.modpublisher.properties.ModLoader

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '1.0.17'
    id 'com.diffplug.spotless'
    id "com.hypherionmc.modutils.modpublisher" version '2.1.6'
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

repositories {
    mavenLocal()
}

base {
    archivesName = mod_name.replace(" ", "")
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
    version = project.neoforge_version

    validateAccessTransformers = true

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    mods {
        advanced_ae {
            sourceSet sourceSets.main
        }
    }

    accessTransformers {
        file('src/main/resources/META-INF/accesstransformer.cfg')
    }

    runs {
        client {
            client()
        }

        server {
            server()
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
            //programArgument '--nogui'
        }

        gametestWorld {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath(), "--existing-mod", "ae2"
        }

        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
    exclude '.cache/'
}

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

repositories {
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
        content {
            includeGroup "dev.emi"
        }
    }
    maven {
        name 'cursemaven'
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = "Modmaven"
        url = uri("https://modmaven.dev/")
        content {
            includeGroup("appeng")
            includeGroup("de.mari_023")
        }
    }
    maven {
        url "https://maven.shedaniel.me/"
        content {
            includeGroup "me.shedaniel"
            includeGroup "me.shedaniel.cloth"
            includeGroup "dev.architectury"
        }
    }
    maven {
        name = 'GeckoLib'
        url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
        content {
            includeGroup("software.bernie.geckolib")
        }
    }
}

dependencies {
    implementation "curse.maven:glodium-957920:5821676"
    implementation "curse.maven:guideme-1173950:6812025"
    implementation "org.appliedenergistics:appliedenergistics2:19.2.15"
    implementation "curse.maven:ex-pattern-provider-892005:6863556"
    implementation "de.mari_023:ae2wtlib_api:19.2.5"
    implementation "software.bernie.geckolib:geckolib-neoforge-${minecraft_version}:${geckolib_version}"
    compileOnly "curse.maven:emi-580555:6420931"
    implementation "curse.maven:applied-flux-965012:6649565"
    implementation "curse.maven:jade-324717:6853386"
    compileOnly "me.shedaniel:RoughlyEnoughItems-neoforge:16.0.799"
    implementation "curse.maven:mega-cells-622112:6853076"
    implementation "curse.maven:mekanism-268560:6895130"
    implementation "curse.maven:curios-309927:6529130"
    compileOnly "curse.maven:jei-238222:6829086"

    runtimeOnly "curse.maven:placebo-283644:6751290"
    runtimeOnly "curse.maven:apothic-attributes-898963:6751650"
    implementation "curse.maven:apothic-enchanting-1063926:6751658"
    compileOnly "curse.maven:irisshaders-455508:6661598"
    // setup Xei
    switch (use_Xei) {
        case "emi":
            runtimeOnly "curse.maven:emi-580555:6420931"
            break
        case "rei":
            runtimeOnly "me.shedaniel:RoughlyEnoughItems-neoforge:16.0.799"
            runtimeOnly "dev.architectury:architectury-neoforge:15.0.8"
            runtimeOnly "curse.maven:cloth-config-348521:5729127"
            break
        case "jei":
            runtimeOnly "curse.maven:jei-238222:6829086"
            runtimeOnly "dev.architectury:architectury-neoforge:13.0.8"
    }
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            neo_version         : neoforge_version, neo_version_range: neoforge_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description, geckolib_version: geckolib_version,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

publisher {
    apiKeys {
        // Modrinth Token
        modrinth System.getenv("MODRINTH_TOKEN")
        // Curseforge Token
        curseforge System.getenv("CURSE_TOKEN")
        // GitHub Token
        github System.getenv("GITHUB_TOKEN")
    }

    // Enable Debug mode. When enabled, no files will actually be uploaded
    setDebug(false)

    // Curseforge Project ID
    setCurseID("1084104")

    // Modrinth Project ID
    setModrinthID("rxYaglEe")

    // Type of release. beta, alpha or release
    // You can also use VersionType.BETA, VersionType.ALPHA or VersionType.RELEASE
    setVersionType("RELEASE")

    // Changelog. This can be a file, string, OR, gist/github url
    // For example: markdown.md, or "This is my changelog"
    // Or: https://raw.githubusercontent.com/hypherionmc/changelogs/changelog.md
    // Or https://gist.githubusercontent.com/hypherionmc/92f825d3c9337964cc77c9c8c9bf65e6/raw/ceeaaee5b98c688a23398864fe480b84796a1651/test_gist.md
    setChangelog("https://raw.githubusercontent.com/pedroksl/AdvancedAE/refs/heads/master/CHANGELOG.md")

    // Required for Modrinth/GitHub
    setProjectVersion("${project.version}")

    // Fancy display name for the upload.
    // Will default to the project version if not set
    setDisplayName("AdvancedAE-${project.version}")

    // The supported game versions
    setGameVersions("${project.minecraft_version}")

    // The modloaders your upload supports.
    // This can also be an Enum from ModLoader,
    // like setLoaders(ModLoader.FABRIC, ModLoader.FORGE)
    setLoaders(ModLoader.NEOFORGE)

    // The new Curseforge Environment tag. Optional
    // Valid values are "server", "client" or "both"
    // You can also use CurseEnvironment.BOTH, or CurseEnvironment.SERVER or CurseEnvironment.CLIENT
    setCurseEnvironment("both")

    // The file to be uploaded. This can be a file, task, or string.
    // setArtifact("build/libs/mymod.jar")
    // setArtifact(jar.getArchiveFile().get())
    // If this is a task, the task specified will be executed before publishing
    setArtifact("build/libs/${project.mod_name.replace(" ", "")}-${project.version}.jar")

    // Disable the built in Fractureizer scanner
    setDisableMalwareScanner(true)

    // Add supported java versions. Currently only used by CurseForge
    // Supports anything that can be parsed using JavaVersion.toVersion()
    setJavaVersions(JavaVersion.VERSION_21, 21)

    // Safety check to check if the artifact contains a valid mod metadata entry,
    // which could possibly mean that the jar is empty
    setDisableEmptyJarCheck(true)

    github {
        repo = "pedroksl/AdvancedAE"

        tag = "${project.version}-neoforge"

        createTag = true
        createRelease = true
        draft = false
        updateRelease = true

        displayName = "AdvancedAE-${project.version}"
    }

    curseDepends {
        required "applied-energistics-2", "glodium", "geckolib"
    }

    modrinthDepends {
        required "ae2", "glodium", "geckolib"
    }
}

spotless {
    java {
        target("/src/**/java/**/*.java")
        endWithNewline()
        indentWithTabs(1)
        removeUnusedImports()
        palantirJavaFormat()
        importOrderFile(file("aae.importorder"))
        toggleOffOn()

        bumpThisNumberIfACustomStepChanges(1)
    }

    json {
        target('src/**/resources/**/*.json')
        targetExclude('src/generated/resources/**')
        biome()
        indentWithTabs(1)
        endWithNewline()
    }
}